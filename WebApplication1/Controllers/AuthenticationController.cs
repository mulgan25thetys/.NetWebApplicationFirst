using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using Web.Services.DTO;

namespace WebApplication1.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class AuthenticationController : ControllerBase
    {
        #region Fields
        private UserManager<IdentityUser> _userManager;
        private IConfiguration _configuration = null;
        //private ILogger<AuthenticationController> _logger;
        #endregion

        #region construtors
        public AuthenticationController(UserManager<IdentityUser> userManager, IConfiguration configuration) {
            this._userManager = userManager;
            this._configuration = configuration;
            //this._logger = logger;
            //this._logger.LogDebug("We are logging now!");
            //_logger.LogWarning("logging wanibh");
        }
        #endregion

        [HttpPost]
        [Route("register")]
        public async Task<IActionResult> Register([FromBody] AuthenticationDto authDto)
        {
            IActionResult result = BadRequest();

            var user = new IdentityUser(authDto.Login);
            user.Email = authDto.Login;
            user.UserName = authDto.Name;
            
            var success = await this._userManager.CreateAsync(user, authDto.Password);
           
            if (success.Succeeded)
            {
                authDto.Token = this.GenerateJwtToken(user);
                return Ok(authDto);
            }
            else
            {
                return BadRequest(success.Errors);
            }
        }

        [HttpPost]
        public async Task<IActionResult> Login([FromBody] AuthenticationDto authDto)
        {
            IActionResult result = BadRequest();

            var user = await _userManager.FindByNameAsync(authDto.Login);

            if (user != null)
            {
                var verif = await _userManager.CheckPasswordAsync(user, authDto.Password);
                if (verif)
                {
                    return this.Ok(new AuthenticationDto()
                    {
                        Login = authDto.Login,
                        Name = user.UserName,
                        Token = this.GenerateJwtToken(user)
                    }) ;
                }
            }
            else
            {
                return BadRequest();
            }

            return result;
        }
        private string GenerateJwtToken(IdentityUser user)
        {
            // Now its ime to define the jwt token which will be responsible of creating our tokens
            var jwtTokenHandler = new JwtSecurityTokenHandler();

            // We get our secret from the appsettings
            var key = Encoding.UTF8.GetBytes(this._configuration["Jwt:Key"]);

            // we define our token descriptor
            // We need to utilise claims which are properties in our token which gives information about the token
            // which belong to the specific user who it belongs to
            // so it could contain their id, name, email the good part is that these information
            // are generated by our server and identity framework which is valid and trusted
            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(new[]
                {
                new Claim("Id", user.Id),
                new Claim(JwtRegisteredClaimNames.Sub, user.Email),
                new Claim(JwtRegisteredClaimNames.Email, user.Email),
                // the JTI is used for our refresh token which we will be convering in the next video
                new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())
            }),
                // the life span of the token needs to be shorter and utilise refresh token to keep the user signedin
                // but since this is a demo app we can extend it to fit our current need
                Expires = DateTime.UtcNow.AddHours(6),
                // here we are adding the encryption alogorithim information which will be used to decrypt our token
                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha512Signature)
            };

            var token = jwtTokenHandler.CreateToken(tokenDescriptor);

            var jwtToken = jwtTokenHandler.WriteToken(token);

            return jwtToken;
        }
    }

}
